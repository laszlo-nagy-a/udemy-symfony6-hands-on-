security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)

        # melyik entitásra készüljön a security és annak melyik property-je unique
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            #TODO: lazy load átnézése
            lazy: true
            provider: app_user_provider
            #megvizsgálja, hogy bannolt-e a user
            user_checker: App\Security\UserChecker
            #bejelentkezéshez az útvonal megadása
            form_login:
                #login route name
                login_path: app_login
                #TODO: átolvasni mi ez
                check_path: app_login

            logout:
                #logout route name
                path: app_logout
                #ide kerülünk redirectelésre, logout után
                target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # melyik útvonalon milyen role szükséges annak eléréséhez
        # - { path: ^/micro-post, roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/profile, roles: ROLE_USER }

    #role hierarchia
    role_hierarchy:
        #A ROLE_ADMIN rendelkezik a ROLE_EDITOR jogokkal stb...
        ROLE_ADMIN: [ROLE_EDITOR]
        ROLE_EDITOR: [ROLE_COMMENTER]
        ROLE_COMMENTER: [ROLE_USER]


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
